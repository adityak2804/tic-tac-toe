{"version":3,"sources":["components/icon.js","App.js","serviceWorker.js","index.js"],"names":["Icon","name","itemArray","Array","fill","App","useState","isCross","setisCross","winMessage","setwinMessage","count","changeItem","itemNumber","toast","type","Container","position","Row","Col","md","className","Button","color","block","onClick","Fragment","map","item","index","Card","CardBody","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.02c00587.chunk.js","sourcesContent":["import React from 'react'\r\nimport { FaRegCircle } from 'react-icons/fa'\r\nimport { IoMdClose } from 'react-icons/io'\r\n\r\n\r\nconst Icon = ({name}) => {\r\n    switch (name) {\r\n        case \"Circle\":\r\n                return <FaRegCircle />            \r\n        case \"Cross\":\r\n                return <IoMdClose />  \r\n        default:\r\n                return null\r\n    }\r\n}\r\n\r\nexport default Icon;","import React, {useState} from 'react';\nimport Icon from \"./components/icon\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Card, CardBody, Container, Button, Col, Row } from \"reactstrap\"\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nconst itemArray = new Array(9).fill(\"empty\")\n\nconst App = () => {\n  const [isCross, setisCross] = useState(true)\n  const [winMessage, setwinMessage] = useState(\"\")\n  const [count,setCount]= useState(0)\n\n  const reloadGame = () =>{\n    setisCross(false);\n    setwinMessage(\"\");\n    itemArray.fill(\"empty\",0,9)\n  }\n\n\n  const checkIsWinner = () => {\n    if(itemArray[0]===itemArray[1] && \n      itemArray[0]===itemArray[2]&&\n      itemArray[0] !==\"empty\"){\n        setwinMessage(`${itemArray[0]} wins` )\n      }else if(        \n      itemArray[3]===itemArray[4] && \n      itemArray[3]===itemArray[5]&&\n      itemArray[3] !==\"empty\"){\n        setwinMessage(`${itemArray[3]} wins` )\n      }else if(\n      itemArray[6]===itemArray[7] && \n      itemArray[6]===itemArray[8]&&\n      itemArray[6] !==\"empty\"){\n        setwinMessage(`${itemArray[6]} wins` )\n      }else if(\n        itemArray[0]===itemArray[3] && \n        itemArray[0]===itemArray[6]&&\n        itemArray[0] !==\"empty\"){\n          setwinMessage(`${itemArray[0]} wins` )\n        }else if(\n          itemArray[2]===itemArray[5] && \n          itemArray[2]===itemArray[8]&&\n          itemArray[2] !==\"empty\"){\n            setwinMessage(`${itemArray[2]} wins` )\n          }else if(\n            itemArray[1]===itemArray[4] && \n            itemArray[1]===itemArray[7]&&\n            itemArray[1] !==\"empty\"){\n              setwinMessage(`${itemArray[1]} wins` )\n            }else if(\n              itemArray[0]===itemArray[4] && \n              itemArray[0]===itemArray[8]&&\n              itemArray[0] !==\"empty\"){\n                setwinMessage(`${itemArray[0]} wins` )\n              }else if(\n                itemArray[2]===itemArray[4] && \n                itemArray[2]===itemArray[6]&&\n                itemArray[2] !==\"empty\"){\n                  setwinMessage(`${itemArray[2]} wins` )\n                }else if(count === 8){\n                  setwinMessage(`Match is Tie Bro!!!`)\n                }\n  }\n  \n\n\n  const changeItem = itemNumber => {\n    \n    if (winMessage) {\n      return toast(winMessage,{type : \"success\"})\n    }\n    if (itemArray[itemNumber]===\"empty\") {\n      itemArray[itemNumber]= isCross ? \"Cross\": \"Circle\"\n      setisCross(!isCross)\n    }else{\n      return toast(\"Already Filled!!!!\",{type: \"error\"})\n    }\n    checkIsWinner();\n    \n  }\n  // const checkIsGameTie = () => {\n  //   let i=0\n    \n  //   while(i<9){\n  //     if(itemArray[i] !== \"\"){\n  //       setCount(count+1)\n  //     }\n  //   }\n  // }\n  return (\n    <div>\n\n      <Container>\n        <ToastContainer position = \"bottom-center\" />\n        <Row>\n          <Col md={6} className=\"offset-md-3\">\n            {winMessage ? (\n              <div className=\"mb-2 mt-2\" >\n                <h1 className=\"text-primary text-uppercase text-center\">\n                  {winMessage}\n                </h1>\n                <Button color=\"success\" block onClick={reloadGame}>\n                Reload the game\n              </Button>\n              </div>\n            ) : (\n              <React.Fragment>\n              <h1 className=\"text-center text-danger\">Classic Tic Tac Toe</h1>\n              <h3 className=\"text-center text-warning\">\n                Game Starts ! ! ! <br />\n                {isCross ? \"Cross\": \"Circle\"} turn\n              </h3>\n              \n              </React.Fragment>\n            ) }\n            <div className=\"grid\">\n              {itemArray.map((item,index)=>(\n                <Card onClick={() => changeItem(index)} >\n                  <CardBody className=\"box\">\n\n                    <Icon name={item}/>\n\n                  </CardBody>\n                </Card>\n              ))}\n              \n            </div>\n            <br />\n            <p className=\"text-sm-right text-info font-weight-bold\">by Aditya Kumar</p>\n          </Col>\n          \n        </Row>\n        \n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}