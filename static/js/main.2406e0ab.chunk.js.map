{"version":3,"sources":["components/icon.js","App.js","serviceWorker.js","index.js"],"names":["Icon","name","itemArray","Array","fill","App","useState","moves","setMoves","isCross","setisCross","winMessage","setwinMessage","isTie","setisTie","reloadGame","changeItem","itemNumber","toast","type","gameTie","console","log","forEach","class","Container","position","Row","Col","md","className","Button","color","block","onClick","map","item","index","Card","CardBody","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2406e0ab.chunk.js","sourcesContent":["import React from 'react'\nimport { FaRegCircle } from 'react-icons/fa'\nimport { IoMdClose } from 'react-icons/io'\n\n\nconst Icon = ({name}) => {\n    switch (name) {\n        case \"Circle\":\n                return <FaRegCircle />            \n        case \"Cross\":\n                return <IoMdClose />  \n        default:\n                return null\n    }\n}\n\nexport default Icon;","import React, {useState} from 'react';\nimport Icon from \"./components/icon\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Card, CardBody, Container, Button, Col, Row } from \"reactstrap\"\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nconst itemArray = new Array(9).fill(\"empty\")\n\nconst App = () => {\n  const [moves,setMoves] = useState(0)\n  const [isCross, setisCross] = useState(true)\n  const [winMessage, setwinMessage] = useState(\"\")\n  const [isTie, setisTie] = useState(false)\n\n  const reloadGame = () =>{\n    setisCross(false);\n    setwinMessage(\"\");\n    itemArray.fill(\"empty\",0,9)\n    setMoves(0)\n    setisTie(false)\n  }\n\n\n  const checkIsWinner = () => {\n    if(itemArray[0]===itemArray[1] && \n      itemArray[0]===itemArray[2]&&\n      itemArray[0] !==\"empty\"){\n        setwinMessage(`${itemArray[0]} wins` )\n      }else if(        \n      itemArray[3]===itemArray[4] && \n      itemArray[3]===itemArray[5]&&\n      itemArray[3] !==\"empty\"){\n        setwinMessage(`${itemArray[3]} wins` )\n      }else if(\n      itemArray[6]===itemArray[7] && \n      itemArray[6]===itemArray[8]&&\n      itemArray[6] !==\"empty\"){\n        setwinMessage(`${itemArray[6]} wins` )\n      }else if(\n        itemArray[0]===itemArray[3] && \n        itemArray[0]===itemArray[6]&&\n        itemArray[0] !==\"empty\"){\n          setwinMessage(`${itemArray[0]} wins` )\n        }else if(\n          itemArray[2]===itemArray[5] && \n          itemArray[2]===itemArray[8]&&\n          itemArray[2] !==\"empty\"){\n            setwinMessage(`${itemArray[2]} wins` )\n          }else if(\n            itemArray[1]===itemArray[4] && \n            itemArray[1]===itemArray[7]&&\n            itemArray[1] !==\"empty\"){\n              setwinMessage(`${itemArray[1]} wins` )\n            }else if(\n              itemArray[0]===itemArray[4] && \n              itemArray[0]===itemArray[8]&&\n              itemArray[0] !==\"empty\"){\n                setwinMessage(`${itemArray[0]} wins` )\n              }else if(\n                itemArray[2]===itemArray[4] && \n                itemArray[2]===itemArray[6]&&\n                itemArray[2] !==\"empty\"){\n                  setwinMessage(`${itemArray[2]} wins` )\n                }\n  }\n  \n\n\n  const changeItem = itemNumber => {\n\n    if (winMessage) {\n      return toast(winMessage,{type : \"success\"})\n    }\n    if (itemArray[itemNumber]===\"empty\") {\n      itemArray[itemNumber]= isCross ? \"Cross\": \"Circle\"\n      setisCross(!isCross)\n    }else{\n      return toast(\"Already Filled!!!!\",{type: \"error\"})\n    }\n    checkIsWinner();\n    gameTie();\n  }\n\n  const gameTie = () => {\n    console.log(\"aagyaaa\")\n    itemArray.forEach(itemNumber => {\n      if(itemArray[itemNumber] !== ''){\n        setMoves(moves+1)\n        console.log(moves);\n\n      }\n    });\n    if (moves === 8) {\n      setisTie(true)\n      return toast(\"Game Tie\", {type: \"info\"})\n      \n    }\n  }\n\n  return (\n    <div>\n      <h1 class=\"text-center text-danger\">Classic Tic Tac Toe</h1>\n      <Container>\n        <ToastContainer position = \"bottom-center\" />\n        <Row>\n          <Col md={6} className=\"offset-md-3\">\n            {winMessage ? (\n              <div className=\"mb-2 mt-2\" >\n                <h1 className=\"text-primary text-uppercase text-center\">\n                  {winMessage}\n                </h1>\n                <Button color=\"success\" block onClick={reloadGame}>\n                Reload the game\n              </Button>\n              </div>\n            ): isTie ? (\n              <div className=\"mb-2 mt-2\" >\n                <Button color=\"success\" block onClick={reloadGame}>\n                  Reload\n                </Button>\n              </div>             \n            ) : (\n              <h1 className=\"text-center text-warning\">\n                {isCross ? \"Cross\": \"Circle\"} turn\n              </h1>\n              ) \n            }\n            {/* {\n              (\n                null\n                ) \n            } */}\n            \n            \n            <div className=\"grid\">\n              {itemArray.map((item,index)=>(\n                <Card onClick={() => changeItem(index)} >\n                  <CardBody className=\"box\">\n\n                    <Icon name={item}/>\n\n                  </CardBody>\n                </Card>\n              ))}\n            </div>\n            <br/>\n            <p class=\"text-sm-right text-info font-weight-bold\">by Aditya Kumar</p>\n          </Col>\n          \n        </Row>\n        \n      </Container>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}